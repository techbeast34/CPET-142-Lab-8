// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/24/2017 17:46:28"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Lab8
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Lab8_vlg_vec_tst();
// constants                                           
// general purpose registers
reg X;
reg Y;
reg Z;
// wires                                               
wire HEX0_a;
wire HEX0_b;
wire HEX0_c;
wire HEX0_d;
wire HEX0_e;
wire HEX0_f;
wire HEX0_g;
wire HEX1_a;
wire HEX1_b;
wire HEX1_c;
wire HEX1_d;
wire HEX1_e;
wire HEX1_f;
wire HEX1_g;
wire HEX2_a;
wire HEX2_b;
wire HEX2_c;
wire HEX2_d;
wire HEX2_e;
wire HEX2_f;
wire HEX2_g;
wire HEX3_a;
wire HEX3_b;
wire HEX3_c;
wire HEX3_d;
wire HEX3_e;
wire HEX3_f;
wire HEX3_g;

// assign statements (if any)                          
Lab8 i1 (
// port map - connection between master ports and signals/registers   
	.HEX0_a(HEX0_a),
	.HEX0_b(HEX0_b),
	.HEX0_c(HEX0_c),
	.HEX0_d(HEX0_d),
	.HEX0_e(HEX0_e),
	.HEX0_f(HEX0_f),
	.HEX0_g(HEX0_g),
	.HEX1_a(HEX1_a),
	.HEX1_b(HEX1_b),
	.HEX1_c(HEX1_c),
	.HEX1_d(HEX1_d),
	.HEX1_e(HEX1_e),
	.HEX1_f(HEX1_f),
	.HEX1_g(HEX1_g),
	.HEX2_a(HEX2_a),
	.HEX2_b(HEX2_b),
	.HEX2_c(HEX2_c),
	.HEX2_d(HEX2_d),
	.HEX2_e(HEX2_e),
	.HEX2_f(HEX2_f),
	.HEX2_g(HEX2_g),
	.HEX3_a(HEX3_a),
	.HEX3_b(HEX3_b),
	.HEX3_c(HEX3_c),
	.HEX3_d(HEX3_d),
	.HEX3_e(HEX3_e),
	.HEX3_f(HEX3_f),
	.HEX3_g(HEX3_g),
	.X(X),
	.Y(Y),
	.Z(Z)
);
initial 
begin 
#50000 $finish;
end 

// X
initial
begin
	X = 1'b0;
	X = #40000 1'b1;
end 

// Y
initial
begin
	Y = 1'b0;
	Y = #20000 1'b1;
	Y = #20000 1'b0;
end 

// Z
initial
begin
	Z = 1'b0;
	Z = #10000 1'b1;
	Z = #10000 1'b0;
	Z = #10000 1'b1;
	Z = #10000 1'b0;
end 
endmodule

